{"version":3,"sources":["assets/images/sndklogo.png","components/Loader.js","pages/auth/Login.js"],"names":["module","exports","Loader","className","Login","props","_isMounted","handleValidSubmit","event","values","loginUser","username","password","history","renderRedirectToRoot","isUserAuthenticated","to","bind","state","this","isAuthTokenValid","Fragment","lg","src","logo","alt","height","loading","error","color","isOpen","onValidSubmit","name","label","placeholder","value","required","for","type","id","Component","connect","Auth","user"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,sC,iCCA3C,oBAmBeC,IAdA,WACX,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,mBACX,8BACA,8BACA,mC,iQCAdC,E,kDAGF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAHVC,YAAa,EAEM,EAqBnBC,kBAAoB,SAACC,EAAOC,GACxB,EAAKJ,MAAMK,UAAUD,EAAOE,SAAUF,EAAOG,SAAU,EAAKP,MAAMQ,UAtBnD,EA4BnBC,qBAAuB,WAEnB,GADyBC,cAErB,OAAO,kBAAC,IAAD,CAAUC,GAAG,gBA5BxB,EAAKT,kBAAoB,EAAKA,kBAAkBU,KAAvB,gBACzB,EAAKC,MAAQ,CACTP,SAAU,uBACVC,SAAU,UANC,E,qDAUnB,WACIO,KAAKb,YAAa,I,kCAGtB,WACIa,KAAKb,YAAa,I,oBAoBtB,WACI,IAAMc,EAAmBL,cACzB,OACI,kBAAC,IAAMM,SAAP,KACKF,KAAKL,wBAEJK,KAAKb,aAAec,IAClB,yBAAKjB,UAAU,2BACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKA,UAAU,0BACX,kBAAC,IAAD,CAAKmB,GAAI,GACL,kBAAC,IAAD,KACI,yBAAKnB,UAAU,yCACX,kBAAC,IAAD,CAAMa,GAAG,KACL,8BACI,yBAAKO,IAAKC,IAAMC,IAAI,GAAGC,OAAO,UAK1C,kBAAC,IAAD,CAAUvB,UAAU,yBAEfgB,KAAKd,MAAMsB,SAAW,kBAAC,IAAD,MAEvB,yBAAKxB,UAAU,2BACX,wBAAIA,UAAU,kDAAd,UAMHgB,KAAKd,MAAMuB,OACR,kBAAC,IAAD,CAAOC,MAAM,SAASC,SAAQX,KAAKd,MAAMuB,OACrC,6BAAMT,KAAKd,MAAMuB,QAIzB,kBAAC,SAAD,CAAQG,cAAeZ,KAAKZ,mBACxB,kBAAC,UAAD,CACIyB,KAAK,WACLC,MAAM,WACNC,YAAY,sBACZC,MAAOhB,KAAKD,MAAMP,SAClByB,UAAQ,IAGZ,kBAAC,UAAD,KACI,kBAAC,IAAD,CAAOC,IAAI,YAAX,YAEA,kBAAC,UAAD,CACIC,KAAK,WACLN,KAAK,WACLO,GAAG,WACHL,YAAY,sBACZC,MAAOhB,KAAKD,MAAMN,SAClBwB,UAAQ,IAEZ,kBAAC,aAAD,+BAGJ,kBAAC,IAAD,CAAWjC,UAAU,eACjB,kBAAC,IAAD,CAAQA,UAAU,YAAY0B,MAAM,QAApC,YAKpD,6BAC4C,uBAAG1B,UAAU,oCAAb,yBACmB,IACvB,kBAAC,IAAD,CAAMa,GAAG,oBAAoBb,UAAU,mBACnC,oD,GA5GxBqC,aAmILC,uBALS,SAAAvB,GACpB,MAAiCA,EAAMwB,KACvC,MAAO,CAAEC,KADT,EAAQA,KACOhB,QADf,EAAcA,QACUC,MADxB,EAAuBA,SAMvB,CAAElB,eAFS+B,CAGbrC","file":"static/js/17.4bd9a08b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sndklogo.96ac54ca.png\";","import React from 'react';\r\n\r\n/**\r\n * Renders the preloader\r\n */\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"preloader\">\r\n            <div className=\"status\">\r\n                <div className=\"bouncing-loader\">\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loader;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect, Link } from 'react-router-dom';\r\n\r\nimport { Container, Row, Col, Card, CardBody, Label, FormGroup, Button, Alert } from 'reactstrap';\r\nimport { AvForm, AvField, AvGroup, AvInput, AvFeedback } from 'availity-reactstrap-validation';\r\n\r\nimport { loginUser } from '../../redux/actions';\r\nimport { isUserAuthenticated } from '../../helpers/authUtils';\r\nimport LoaderWidget from '../../components/Loader';\r\nimport logo from '../../assets/images/sndklogo.png';\r\n\r\nclass Login extends Component {\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleValidSubmit = this.handleValidSubmit.bind(this);\r\n        this.state = {\r\n            username: 'parth710@hotmail.com',\r\n            password: '123456',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    /**\r\n     * Handles the submit\r\n     */\r\n    handleValidSubmit = (event, values) => {\r\n        this.props.loginUser(values.username, values.password, this.props.history);\r\n    };\r\n\r\n    /**\r\n     * Redirect to root\r\n     */\r\n    renderRedirectToRoot = () => {\r\n        const isAuthTokenValid = isUserAuthenticated();\r\n        if (isAuthTokenValid) {\r\n            return <Redirect to=\"/dashboard\" />;\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const isAuthTokenValid = isUserAuthenticated();\r\n        return (\r\n            <React.Fragment>\r\n                {this.renderRedirectToRoot()}\r\n\r\n                {(this._isMounted || !isAuthTokenValid) && (\r\n                    <div className=\"account-pages mt-5 mb-5\">\r\n                        <Container>\r\n                            <Row className=\"justify-content-center\">\r\n                                <Col lg={5}>\r\n                                    <Card>\r\n                                        <div className=\"card-header py-2 text-center bg-light\">\r\n                                            <Link to=\"/\">\r\n                                                <span>\r\n                                                    <img src={logo} alt=\"\" height=\"80\" />\r\n                                                </span>\r\n                                            </Link>\r\n                                        </div>\r\n\r\n                                        <CardBody className=\"p-4 position-relative\">\r\n                                            {/* preloader */}\r\n                                            {this.props.loading && <LoaderWidget />}\r\n\r\n                                            <div className=\"text-center w-75 m-auto\">\r\n                                                <h4 className=\"text-dark-50 text-center mt-0 font-weight-bold\">\r\n                                               LOGIN\r\n                                                </h4>\r\n                                             \r\n                                            </div>\r\n\r\n                                            {this.props.error && (\r\n                                                <Alert color=\"danger\" isOpen={this.props.error ? true : false}>\r\n                                                    <div>{this.props.error}</div>\r\n                                                </Alert>\r\n                                            )}\r\n\r\n                                            <AvForm onValidSubmit={this.handleValidSubmit}>\r\n                                                <AvField\r\n                                                    name=\"username\"\r\n                                                    label=\"Username\"\r\n                                                    placeholder=\"Enter your username\"\r\n                                                    value={this.state.username}\r\n                                                    required\r\n                                                />\r\n\r\n                                                <AvGroup>\r\n                                                    <Label for=\"password\">Password</Label>\r\n                                                  \r\n                                                    <AvInput\r\n                                                        type=\"password\"\r\n                                                        name=\"password\"\r\n                                                        id=\"password\"\r\n                                                        placeholder=\"Enter your password\"\r\n                                                        value={this.state.password}\r\n                                                        required\r\n                                                    />\r\n                                                    <AvFeedback>This field is invalid</AvFeedback>\r\n                                                </AvGroup>\r\n\r\n                                                <FormGroup className=\"text-center\">\r\n                                                    <Button className=\"btn-block\" color=\"info\">Submit</Button>\r\n                                                </FormGroup>\r\n\r\n                                            \r\n                                            </AvForm>\r\n<hr/>\r\n                                            <p className=\"text-muted mb-0 mt-2 text-center\">\r\n                                        Don't have an account?{' '}\r\n                                        <Link to=\"/account/register\" className=\"text-muted ml-1\">\r\n                                            <b>Register</b>\r\n                                        </Link>\r\n                                    </p>\r\n                                        </CardBody>\r\n                                    </Card>\r\n                                </Col>\r\n                          \r\n                            </Row>\r\n\r\n                            \r\n                        </Container>\r\n                    </div>\r\n                )}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    const { user, loading, error } = state.Auth;\r\n    return { user, loading, error };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { loginUser }\r\n)(Login);\r\n"],"sourceRoot":""}